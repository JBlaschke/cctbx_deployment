
FROM ubuntu:18.04
LABEL maintainer="Johannes Blaschke <jpblaschke@lbl.gov>"
# adapted from Rollin Thomas <rcthomas@lbl.gov>
# and Kelly Rowland <kellyrowland@lbl.gov>

# Base Ubuntu packages

ENV DEBIAN_FRONTEND noninteractive
ENV LANG C.UTF-8

RUN \
    apt-get update          &&                                                 \
    apt-get --yes upgrade   &&                                                 \
    apt-get --yes install                                                      \
        bzip2                                                                  \
        curl                                                                   \
        git                                                                    \
        libffi-dev                                                             \
        lsb-release                                                            \
        tzdata                                                                 \
        vim                                                                    \
        wget                                                                   \
        bash                                                                   \
        autoconf                                                               \
        automake                                                               \
        gcc                                                                    \
        g++                                                                    \
        make                                                                   \
        gfortran                                                               \
        tar

# Timezone to Berkeley

ENV TZ=America/Los_Angeles
RUN \
    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime  &&  \
    echo $TZ > /etc/timezone


#-------------------------------------------------------------------------------
# MPICH
#
# Currently shifter-based MPI functionality is only available for images where
# MPICH is installed manually
#

RUN mkdir -p /img/static
COPY static/mpich-*.tar.gz /img/static

RUN mkdir -p /img/build/mpi
RUN cd /img/build/mpi                                                       && \
    source_name=$(find /img/static/ -maxdepth 1 -name "mpich*" -type f)     && \
    tar -xvf $source_name                                                   && \
    source_dir=$(find . -maxdepth 1 -name "mpich*" -type d)                 && \
    cd $source_dir                                                          && \
    ./configure                                                             && \
    make -j && make install

#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# CONDA
#
# Build miniconda and MPI4PY (linking with manually-install MPICH library above)
#

RUN mkdir -p /img/static
COPY static/mpi4py-*.tar.gz /img/static

RUN mkdir /img/conda
COPY conda /img/conda

RUN cd /img/conda                                                           && \
    . sites/default.sh                                                      && \
    ./install_conda.sh

#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# CONDA XTC_BASE ENVIRONMENT
#
# Build the conda environment used by cctbx
#

RUN mkdir -p /img/opt/env

# Copy only the env stuff => don't reinstall the whole conda environment every
# time cctbx/psana (lcls2) are updated
COPY opt/env /img/opt/env

RUN cd /img/opt/env                                                         && \
    ./setup_env.sh

#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# CCTBX + PSANA2
#
# Build XTC processing pipeline
#

# The /opt/ scripts require source => switch `RUN` to execute bash (instead sh)
SHELL ["/bin/bash", "-c"]

# Ubuntu 18.04's cmake is 3.10 but PSANA2 needs cmake > 3.10 => install cmake
# using conda for now.
RUN source /img/opt/env/env.sh                                              && \
    conda install -y cmake

#
# Bootstrap CCTBX
# NOTE: do this first because this is slow
#

# copy the cctbx part of the xtc pipeline into the /opt folder
RUN mkdir -p /img/opt
COPY opt/cctbx /img/opt/cctbx
COPY opt/setup_cctbx.sh /img/opt/
COPY opt/update_boostrap.sh /img/opt/

RUN cd /img/opt/                                                            && \
    ./setup_cctbx.sh

#
# Build PSANA2
#

# copy the lcls part of the xtc pipeline into the /opt folder
RUN mkdir -p /img/opt
COPY opt/lcls2 /img/opt/lcls2
COPY opt/setup_lcls2.sh /img/opt/

# Build psana2 only (seperating psana build process from cctbx's maximizes
# docker layer reuse)
RUN cd /img/opt/                                                            && \
    ./setup_lcls2.sh

#
# Build CCTBX
#

# PATCH: use CCTBX's `import_ext` branch (pointed to by the $CCTBX_REV
# variable) to avoid import_ext issues on HPC systems (cf problems running at
# scale on summit) -- you might ask: why not just `git checkout import_ext`?
# Well, this way, the image is rebuilt when $CCTBX_ENV changes
ARG CCTBX_REV
RUN cd /img/opt/cctbx/modules/cctbx_project                                 && \
    git pull                                                                && \
    git checkout $CCTBX_REV                                                 && \
    cd ../../build                                                          && \
    source /img/opt/env/env.sh                                              && \
    ./bin/libtbx.scons -j 4  # make <-- fix: `make` uses all cpus => too much memory

#
# Create local env file
#

RUN mkdir -p /img/opt
COPY opt/mk_env.sh /img/opt/
RUN cd /img/opt/                                                            && \
    ./mk_env.sh

#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# LDCONFIG
#
# We recommend running an /sbin/ldconfig as part of the image build (e.g. in
# the Dockerfile) to update the cache after installing any new libraries in in
# the image build.
#

RUN /sbin/ldconfig

#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# ENTRYPOINT
#

# copy the rest
RUN mkdir -p /img/tests
COPY tests /img/tests
# /run is a system path => map to /img/run
RUN mkdir -p /img/run
COPY run /img/run
# keep relative paths wrt to non-docker => put data in /img
# this is important for the lcls2 calibconstants patch
RUN mkdir -p /img/data
COPY data /img/data
# scipts to expand base data set
RUN mkdir -p /img/opt/divelite
COPY opt/divelite /img/opt/divelite
# profiling scripts
RUN mkdir -p /img/opt/cctbx_profiling
COPY opt/cctbx_profiling /img/opt/cctbx_profiling

# build the /img/ dir
RUN mkdir -p /img
ADD docker/cctbx-entrypoint.sh /img
RUN ln -s /img/tests/test_mpi4py.py /img/test_mpi4py.py
RUN ln -s /img/tests/run_profile.sh /img/run_profile.sh



WORKDIR /img

RUN chmod +x cctbx-entrypoint.sh
RUN chmod +x test_mpi4py.py

ENTRYPOINT ["./cctbx-entrypoint.sh"]

#-------------------------------------------------------------------------------
